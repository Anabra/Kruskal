// disjoint_set<double> h = {5,3,11,12,13};
// h.merge(5,3);
// h.merge(12,13);
// h.merge(11,12);
// h.merge(5,12);
// cout << h.find(3) << " " << h.subset_size(3) << endl;
// cout << h.find(5) << " " << h.subset_size(5) << endl;
// cout << h.find(11) << " " << h.subset_size(11) << endl;

/*
struct from_char
{
  int operator()(const char c) const
  {
    return (int)c;
  }
};

vector<int> vec = {25,43,128,2,9};
vector<int> char_vec = {'g', 'a', 'f', 'z', 'd'};
copy(vec.begin(), vec.end(), ostream_iterator<int>(cout, " ")); cout << endl;
copy(char_vec.begin(), char_vec.end(), ostream_iterator<char>(cout, " ")); cout << endl;

// counting_sort(char_vec, 10, from_char(), nth_digit(1));
// counting_sort(char_vec, 10, from_char(), nth_digit(2));
// counting_sort(char_vec, 10, from_char(), nth_digit(3));

radix_sort(vec, identitiy<int>());
radix_sort(char_vec, from_char());

copy(vec.begin(), vec.end(), ostream_iterator<int>(cout, " ")); cout << endl;
copy(char_vec.begin(), char_vec.end(), ostream_iterator<char>(cout, " ")); cout << endl;
*/

Graph<string, int> g;

// g.from_node_label("asd");
g.add_edge({"a", 1, "b"});
g.add_edge({"a", 2, "c"});
g.add_edge({"b", 3, "a"});
g.add_edge({"c", 4, "a"});
g.add_edge({"a", 0, "b"});

g.add_node("d");
g.add_node("e");

g.add_edge({"d", 5, "f"});
g.add_edge({"d", 6, "d"});
g.add_edge({"d", 0, "d"});

// cout << g.node_count() << endl;;
// cout << g.edge_count() << endl;;

g.delete_node("c");
g.delete_node("d");

cout << g.get_edges_from("a");
// cout << g.get_nodes_from("a");
// cout << g.get_nodes_from("e");

cout << g.get_edges_from("d");
// cout << g.get_nodes_from("d");
// cout << g.get_nodes_from("e");

cout << g.get_edges_to("a");
// cout << g.get_nodes_to("a");
// cout << g.get_nodes_from("e");

cout << g.get_edges_to("d");
// cout << g.get_nodes_to("d");
// cout << g.get_nodes_from("e");
